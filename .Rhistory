newd = pr.out$x[,1:2]
#trn = unsuptrain[,c(3,4,6)]
st = as.data.frame((newd))
st$sat = datatrain$satisfaction
boxplot(st$PC1~st$sat)
plot(st$PC1 ~ st$PC2, col = st$sat)
boxplot(st$PC2~st$sat)
View(st)
summary(st)
View(datatrain)
#trn = unsuptrain[,c(3,4,6)]
st = as.data.frame((newd))
st$sat = datatrain$satisfaction
st$loy = datatrain$Customer.Type
boxplot(st$PC2~st$loy)
pr.out <- prcomp(unsuptrain, scale = TRUE )
str(unsuptrain)
pr.out$rotation
pr.out$rotation  <- -pr.out$rotation
pr.out$x <- -pr.out$x
pr.out$rotation
pr.out$rotation%*%diag(pr.out$sdev)   # %*% doese matrix multiplication
pr.out$sdev
pr.out$sdev^2
sum(pr.out$sdev^2)
pr.var <-  pr.out$sdev^2
pve <- pr.var/ sum(pr.var)
pve
cumsum(pve )
newd = pr.out$x[,1:2]
#trn = unsuptrain[,c(3,4,6)]
st = as.data.frame((newd))
st$sat = datatrain$satisfaction
st$loy = datatrain$Customer.Type
boxplot(st$PC2~st$loy)
datatrain = read.csv("train.csv")
datatest = read.csv("test.csv")
datatrain = datatrain[,-1:-2]
datatest =  datatest[,-1:-2]
datatrain$satisfaction = as.factor(datatrain$satisfaction)
datatrain$Gender  = as.factor(datatrain$Gender)
datatrain$Customer.Type    = as.factor(datatrain$Customer.Type)
datatrain$Class  = as.factor(datatrain$Class)
datatrain$Type.of.Travel  = as.factor(datatrain$Type.of.Travel)
str(datatrain)
sum(is.na(datatrain))
datatrain = na.omit(datatrain)
datatest = na.omit(datatest)
sum(is.na(datatrain))
logmodeltrain= glm(satisfaction ~ ., data = datatrain , family = binomial(link = "logit"))
summary(logmodeltrain)
coef = logmodeltrain$coefficients
unsuptrain = datatrain[,c(7:20)]
#strain = unsuptrain
str(unsuptrain)
pr.out <- prcomp(unsuptrain, scale = TRUE )
str(unsuptrain)
pr.out$rotation
pr.out$rotation  <- -pr.out$rotation
pr.out$x <- -pr.out$x
pr.out$rotation
pr.out$rotation%*%diag(pr.out$sdev)   # %*% doese matrix multiplication
pr.out$sdev
pr.out$sdev^2
sum(pr.out$sdev^2)
pr.var <-  pr.out$sdev^2
pve <- pr.var/ sum(pr.var)
pve
cumsum(pve )
pr.out$sdev
pr.out$sdev^2
sum(pr.out$sdev^2)
pr.var <-  pr.out$sdev^2
pve <- pr.var/ sum(pr.var)
pve
cumsum(pve )
newd = pr.out$x[,1:2]
par(mfrow = c(1,2))
plot(pve, type = "b")
plot(cumsum(pve), type = "b")
#trn = unsuptrain[,c(3,4,6)]
st = as.data.frame((newd))
st$sat = datatrain$satisfaction
st$loy = datatrain$Customer.Type
View(pr.out$x)
View(scale(datatrain))
View(scale(unsuptrain))
pr.out <- prcomp(unsuptrain, scale = FALSE )
View(pr.out$x)
pr.out$rotation
pr.out$rotation  <- -pr.out$rotation
pr.out$x <- -pr.out$x
pr.out$rotation
View(pr.out$x)
View(unsuptrain)
datatrain = read.csv("train.csv")
datatest = read.csv("test.csv")
datatrain = datatrain[,-1:-2]
datatest =  datatest[,-1:-2]
datatrain$satisfaction = as.factor(datatrain$satisfaction)
datatrain$Gender  = as.factor(datatrain$Gender)
datatrain$Customer.Type    = as.factor(datatrain$Customer.Type)
datatrain$Class  = as.factor(datatrain$Class)
datatrain$Type.of.Travel  = as.factor(datatrain$Type.of.Travel)
str(datatrain)
sum(is.na(datatrain))
datatrain = na.omit(datatrain)
datatest = na.omit(datatest)
sum(is.na(datatrain))
logmodeltrain= glm(satisfaction ~ ., data = datatrain , family = binomial(link = "logit"))
summary(logmodeltrain)
coef = logmodeltrain$coefficients
View(unsuptrain)
knitr::opts_chunk$set(echo = TRUE)
datatrain = read.csv("train.csv")
datatest = read.csv("test.csv")
datatrain = datatrain[,-1:-2]
datatest =  datatest[,-1:-2]
datatrain$satisfaction = as.factor(datatrain$satisfaction)
datatrain$Gender  = as.factor(datatrain$Gender)
datatrain$Customer.Type    = as.factor(datatrain$Customer.Type)
datatrain$Class  = as.factor(datatrain$Class)
datatrain$Type.of.Travel  = as.factor(datatrain$Type.of.Travel)
str(datatrain)
sum(is.na(datatrain))
datatrain = na.omit(datatrain)
datatest = na.omit(datatest)
sum(is.na(datatrain))
logmodeltrain= glm(satisfaction ~ ., data = datatrain , family = binomial(link = "logit"))
summary(logmodeltrain)
coef = logmodeltrain$coefficients
estprob = logmodeltrain$fitted.values
predSatisfaction = estprob
predSatisfaction[estprob <= 0.5] = "neutral or dissatisfied"
predSatisfaction[estprob > 0.5] = "satisfied"
predSatisfaction = as.factor(predSatisfaction)
library(caret)
confusionMatrix(predSatisfaction, datatrain$satisfaction, positive = "satisfied")
library(pROC)
out = roc(datatrain$satisfaction ~ estprob, plot = TRUE )
auc(out)
setwd("~/Downloads/611/RFILES")
library(fpp2)
n = 1000
set.seed(611)
w = ts(rnorm(n))        #Gaussian white noise
x = ts(rep(NA, n))      #initiate x
x[1] = w[1]
for (t in 2:n){
x[t] =.5x[t] + w[t] + w[t-1]
library(fpp2)
n = 1000
set.seed(611)
w = ts(rnorm(n))        #Gaussian white noise
x = ts(rep(NA, n))      #initiate x
x[1] = w[1]
for (t in 2:n){
x[t] =.5*x[t] + w[t] + w[t-1]
}
fig = autoplot(x)
print(fig)
y = ggAcf(x)
print(y)
auto.arima(x)
x = arima.sim(list(ma = c(.9, .3)), n = 500)
autoplot(x)
acf(x)
y = arima.sim(list(ma = c(1), ar=c(.5)), n = 1000)
y = arima.sim(list(ma = c(1), ar=c(.5)), n = 1000)
y
y = arima.sim(list(ma = c(1), ar=c(.5)), n = 1000)
auto.arima(y)
library(fpp2)
n = 1000
set.seed(611)
w = ts(rnorm(n))        #Gaussian white noise
x = ts(rep(NA, n))      #initiate x
x[1] = w[1]
x[2] = w[2]
for (t in 3:n){
x[t] =x[t-1] + .5*x[t-2] + w[t]\
library(fpp2)
n = 1000
set.seed(611)
w = ts(rnorm(n))        #Gaussian white noise
x = ts(rep(NA, n))      #initiate x
x[1] = w[1]
x[2] = w[2]
for (t in 3:n){
x[t] =x[t-1] + .5*x[t-2] + w[t]
}
fig = autoplot(x)
print(fig)
y = ggAcf(x)
#print(y)
library(fpp2)
n = 1000
set.seed(611)
w = ts(rnorm(n))        #Gaussian white noise
x = ts(rep(NA, n))      #initiate x
x[1] = w[1]
x[2] = w[2]
for (t in 3:n){
x[t] =x[t-1] + .5*x[t-2] + w[t]
}
fig = autoplot(x)
print(fig)
#y = ggAcf(x)
#print(y)
#y = arima.sim(list(ma = c(1), ar=c(.5)), n = 1000)
auto.arima(x)
###################### HOMEWORK 2  QUESTION 3################################################
n = 1000
w = ts(rnorm(n))        #Gaussian white noise
x = ts(rep(NA, n))      #initiate x
set.seed(611)
x[1] = w[1]
x[2] = w[2]
x[3] = w[3]
for (t in 4:n){
x[t] = 0.8*x[t-1] - 0.4*x[t-2] + 0.15*x[t-3] +  w[t]
}
abs(polyroot(c(1, -0.8, 0.4, -0.15)))
(polyroot(c(1, -0.8, 0.4, -0.15)))
abs(polyroot(c(1, -0.8, 0.4, -0.15)))
abs(polyroot(c(1, -0.5)))
abs(polyroot(c(1, -0.4, -0.1, 0.2)))
#abs(polyroot(c(1, -0.4, -0.1, 0.2)))
abs(polyroot(c(1, -1, -0.5, 0.2)))
#abs(polyroot(c(1, -0.4, -0.1, 0.2)))
abs(polyroot(c(1, -1, -0.5))
#abs(polyroot(c(1, -0.4, -0.1, 0.2)))
abs(polyroot(c(1, -1, -0.5)))
#abs(polyroot(c(1, -0.4, -0.1, 0.2)))
#abs(polyroot(c(1, -1, -0.5)))
abs(polyroot(c(1, -0.4, -0.1, 0.2)))
#abs(polyroot(c(1, -0.4, -0.1, 0.2)))
abs(polyroot(c(1, -0.1, 0.05)))
a#bs(polyroot(c(1, -0.4, -0.1, 0.2)))
data = read.csv("yellowstone monthly.csv")
data = read.csv("yellowstone_monthly.csv")
library(fpp2)
data = read.csv("yellowstone_monthly.csv")
View(data)
data = read.csv("yellowstone_monthly.csv")
dt.ts = ts(data$visitors,start = 2009, frequency = 12)
dt.ts
autoplot(dt.ts)
amod = auto.arima(dt.ts)
amod = auto.arima(dt.ts)
summary(amod)
acf(resid(amod))
plot(resid(amod))
ggacf(resid(amod))
ggAcf(resid(amod))
ggAcf(resid(amod)^2)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
data(Default)
str(Default)
names(Default)
dim(Default)
summary(Default)
data(iris)
str(iris)
model.matrix(~Species, data =  iris)
Default$defaultYes = model.matrix(~default, data = Default)[,2]
#View(Default)
data(iris)
str(iris)
model.matrix(~Species, data =  iris)
library(car)
#scatterplot(defaultYes~ balance, data = Default)
#boxplot(defaultYes~ balance, data = Default)
mod = lm(defaultYes ~ balance, data = Default)
plot(Default$defaultYes ~ Default$balance)
abline(mod)
out <- lm(defaultYes~ balance, data = Default)
plot(out, 1)
plot(out, 2)
outglm = glm(default ~ balance, data = Default, family = binomial(link = "logit"))
names(outglm)
summary(outglm$coefficients)
plot(Default$balance, outglm$fitted.values)
logmodeltrain= glm(satisfaction ~ ., data = datatrain , family = binomial(link = "logit"))
summary(logmodeltrain)
plot(Age, logmodeltrain$fitted.values, data = datatrain)
setwd("~/Downloads/635/datasetGroup")
datatrain = read.csv("train.csv")
datatest = read.csv("test.csv")
datatrain = datatrain[,-1:-2]
datatest =  datatest[,-1:-2]
datatrain$satisfaction = as.factor(datatrain$satisfaction)
datatrain$Gender  = as.factor(datatrain$Gender)
datatrain$Customer.Type    = as.factor(datatrain$Customer.Type)
datatrain$Class  = as.factor(datatrain$Class)
datatrain$Type.of.Travel  = as.factor(datatrain$Type.of.Travel)
str(datatrain)
sum(is.na(datatrain))
datatrain = na.omit(datatrain)
datatest = na.omit(datatest)
sum(is.na(datatrain))
logmodeltrain= glm(satisfaction ~ ., data = datatrain , family = binomial(link = "logit"))
summary(logmodeltrain)
plot(Age, logmodeltrain$fitted.values, data = datatrain)
logmodeltrain= glm(satisfaction ~ ., data = datatrain , family = binomial(link = "logit"))
summary(logmodeltrain)
plot(datatrain$Age, logmodeltrain$fitted.values)
coef = logmodeltrain$coefficients
deltrain= glm(satisfaction ~ Age, data = datatrain , family = binomial(link = "logit"))
logmodeltrain= glm(satisfaction ~ ., data = datatrain , family = binomial(link = "logit"))
summary(logmodeltrain)
plot(datatrain$Age, deltrain$fitted.values)
coef = logmodeltrain$coefficients
library(dlm)
install.packages("dlm")
library(dlm)
library(fpp2)
?diag
library(fpp2)
library(dlm)
df = read.csv('http://lukecherveny.com/ma611spring22/midterm.csv')
x = ts(df$x)
build_mod = function(parm){
dlm(FF=matrix(c(1, 0), nrow = 1),
GG=matrix(c(0, 1, 1, 0), ncol = 2),
V=matrix(exp(parm[1])),
W=diag(c(exp(parm[2:3]))),
m0=c(1, 1),
C0=diag(c(1e2,1e2)))
}
fitMLE = dlmMLE(x, parm=c(0, 0, 0), build=build_mod)
model = build_mod(fitMLE$par)
filtered = dlmFilter(x, mod=model)
# smoothed = dlmSmooth(filtered)
# forecasted = dlmForecast(model, nAhead = 20)
fig = autoplot(x) +
autolayer(filtered$m[,1], series='Filtered')
print(fig)
library(fpp2)
library(dlm)
df = read.csv('http://lukecherveny.com/ma611spring22/midterm.csv')
x = ts(df$x)
build_mod = function(parm){
dlm(FF=matrix(c(1, 0), nrow = 1),
GG=matrix(c(parm[2], 1, parm[3], 0), ncol = 2),
V=matrix(exp(parm[1])),
W=diag(c(exp(parm[2]))),
m0=c(1, 1),
C0=diag(c(1e2,1e2)))
}
fitMLE = dlmMLE(x, parm=c(0, 0, 1), build=build_mod)
library(fpp2)
library(dlm)
df = read.csv('http://lukecherveny.com/ma611spring22/midterm.csv')
x = ts(df$x)
build_mod = function(parm){
dlm(FF=matrix(c(1, 0), nrow = 1),
GG=matrix(c(parm[2], 1, parm[3], 0), ncol = 2),
V=matrix(exp(parm[1]),1),
W=diag(c(exp(parm[2]))),
m0=c(1, 1),
C0=diag(c(1e2,1e2)))
}
fitMLE = dlmMLE(x, parm=c(0, 0, 1), build=build_mod)
library(fpp2)
library(dlm)
df = read.csv('http://lukecherveny.com/ma611spring22/midterm.csv')
x = ts(df$x)
build_mod = function(parm){
dlm(FF=matrix(c(1, 0), nrow = 1),
GG=matrix(c(parm[1], 1, parm[3], 0), ncol = 2),
V=matrix(exp(parm[1]),1),
W=diag(c(exp(parm[2]))),
m0=c(1, 1),
C0=diag(c(1e2,1e2)))
}
fitMLE = dlmMLE(x, parm=c(0, 0, 1), build=build_mod)
library(fpp2)
library(dlm)
df = read.csv('http://lukecherveny.com/ma611spring22/midterm.csv')
x = ts(df$x)
build_mod = function(parm){
dlm(FF=matrix(c(1, 0), nrow = 1),
GG=matrix(c(parm[3], 1, parm[3], 0), ncol = 2),
V=matrix(exp(parm[1]),1),
W=diag(c(exp(parm[2]))),
m0=c(1, 1),
C0=diag(c(1e2,1e2)))
}
fitMLE = dlmMLE(x, parm=c(0, 0, -1), build=build_mod)
library(fpp2)
library(dlm)
df = read.csv('http://lukecherveny.com/ma611spring22/midterm.csv')
x = ts(df$x)
build_mod = function(parm){
dlm(FF=matrix(c(1, 0), nrow = 1),
GG=matrix(c(parm[1], NA, parm[2], NA), ncol = 2),
W=diag(c(exp(parm[1]), NA)),
W=diag(c(exp(parm[2:3]))),
m0=c(1, 1),
C0=diag(c(1e2,1e2)))
}
fitMLE = dlmMLE(x, parm=c(0, 0, 0), build=build_mod)
library(fpp2)
library(dlm)
df = read.csv('http://lukecherveny.com/ma611spring22/midterm.csv')
x = ts(df$x)
build_mod = function(parm){
dlm(FF=matrix(c(1, 0), nrow = 1),
GG=matrix(c(0,1,1,0), ncol = 2),
V=matrix(exp(parm[1])),
W=diag(c(exp(parm[2]), exp(parm[3]))),
m0=c(1, 1),
C0=diag(c(1e2,1e2)))
}
fitMLE = dlmMLE(x, parm=c(0, 0, 0), build=build_mod)
model = build_mod(fitMLE$par)
filtered = dlmFilter(x, mod=model)
# smoothed = dlmSmooth(filtered)
# forecasted = dlmForecast(model, nAhead = 20)
fig = autoplot(x) +
autolayer(filtered$m[,1], series='Filtered')
print(fig)
summary(model)
tail(filtered$x)
library(fpp2)
library(dlm)
df = read.csv('http://lukecherveny.com/ma611spring22/midterm.csv')
x = ts(df$x)
build_mod = function(parm){
dlm(FF=matrix(c(1, 0), nrow = 1),
GG=matrix(c(0,1,1,0), ncol = 2),
V=matrix(exp(parm[1])),
W=diag(c(exp(parm[2]), exp(parm[3]))),
m0=c(1, 1),
C0=diag(c(1e2,1e2)))
}
fitMLE = dlmMLE(x, parm=c(0, 0, 0), build=build_mod)
model = build_mod(fitMLE$par)
sum
filtered = dlmFilter(x, mod=model)
# smoothed = dlmSmooth(filtered)
# forecasted = dlmForecast(model, nAhead = 20)
fig = autoplot(x) +
autolayer(filtered$m[,1], series='Filtered')
print(fig)
tail(filtered$x)
tail(filtered$m)
library(fpp2)
library(dlm)
df = read.csv('http://lukecherveny.com/ma611spring22/midterm.csv')
x = ts(df$x)
build_mod = function(parm){
dlm(FF=matrix(c(1, 0), nrow = 1),
GG=matrix(c(-1,-1,1,0), ncol = 2),
V=matrix(exp(parm[1])),
W=diag(c(exp(parm[2]), exp(parm[3]))),
m0=c(1, 1),
C0=diag(c(1e2,1e2)))
}
fitMLE = dlmMLE(x, parm=c(0, 0, 0), build=build_mod)
model = build_mod(fitMLE$par)
sum
filtered = dlmFilter(x, mod=model)
# smoothed = dlmSmooth(filtered)
# forecasted = dlmForecast(model, nAhead = 20)
fig = autoplot(x) +
autolayer(filtered$m[,1], series='Filtered')
print(fig)
tail(filtered$m)
library(fpp2)
library(dlm)
df = read.csv('http://lukecherveny.com/ma611spring22/midterm.csv')
x = ts(df$x)
build_mod = function(parm){
dlm(FF=matrix(c(1, 0), nrow = 1),
GG=matrix(c(parm[2], 1, parm[3], 1), ncol = 2),
V=matrix(exp(parm[1])),
W=diag(c(exp(parm[2]), exp(parm[3]))),
m0=c(1, 1),
C0=diag(c(1e2,1e2)))
}
fitMLE = dlmMLE(x, parm=c(0, 0, 0), build=build_mod)
model = build_mod(fitMLE$par)
filtered = dlmFilter(x, mod=model)
# smoothed = dlmSmooth(filtered)
# forecasted = dlmForecast(model, nAhead = 20)
fig = autoplot(x) +
autolayer(filtered$m[,1], series='Filtered')
print(fig)
tail(filtered$m)
tail(filtered$a)
tail(filtered$f)
tail(filtered$D.C)
data = read.csv("yellowstone_monthly.csv")
dt.ts = ts(data$visitors, start = 2009, frequency = 12)
autoplot(dt.ts)
amod = auto.arima(dt.ts)
summary(amod)
View(amod)
View(data)
library(FinTS)
ArchTest((resid(amod))
library(FinTS)
ArchTest(resid(amod))
library(tseries)
modl = garch(resid(amod), order = c(0,2), trace = FALSE)
library(tseries)
modl = garch(resid(amod), order = c(0,1), trace = FALSE)
library(tseries)
modl = garch(resid(amod), order = c(1,0), trace = FALSE)
